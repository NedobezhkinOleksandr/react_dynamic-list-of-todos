{"version":3,"sources":["types/TodosType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodosType","TodoList","todos","selectedTodoId","handleSelectTodo","className","map","todo","id","title","completed","isSelectedTodoId","classNames","type","onClick","TodoFilter","query","onChangeQuery","onChangeTypeOfLoad","onChange","e","target","value","Object","values","current","toUpperCase","slice","placeholder","event","style","pointerEvents","All","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","onClose","useState","user","setUser","isError","setIsError","isLoading","setIsLoading","useEffect","loadUsers","a","userFromServer","href","email","name","color","App","setTodos","setSelectedTodoId","setQuery","typeOfLoad","setTypeOfLoad","getTodosFromServer","todosFromServer","visibleTodos","useMemo","filter","lowerCased","toLowerCase","includes","Active","Completed","selectedTodo","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.414108a1.chunk.js","sourcesContent":["export enum TodosType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n  selectedTodoId: number\n  handleSelectTodo: (id: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  handleSelectTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const {\n          id,\n          title,\n          completed,\n        } = todo;\n        const isSelectedTodoId = id === selectedTodoId;\n\n        return (\n          <tr\n            key={id}\n            data-cy=\"todo\"\n            className=\"\"\n          >\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames(\n                  { 'has-text-danger': !completed },\n                  { 'has-text-success': completed },\n                )}\n              >\n                {title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleSelectTodo(id)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames(\n                    'far',\n                    { 'fa-eye-slash': isSelectedTodoId },\n                    { 'fa-eye': !isSelectedTodoId },\n                  )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { TodosType } from '../../types/TodosType';\n\ntype Props = {\n  query: string;\n  onChangeQuery: (value: string) => void;\n  onChangeTypeOfLoad: (value: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onChangeQuery,\n  onChangeTypeOfLoad,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(e) => onChangeTypeOfLoad(e.target.value)}\n          >\n\n            {Object.values(TodosType).map(current => (\n              <option value={current}>\n                {`${current[0].toUpperCase() + current.slice(1)}`}\n              </option>\n            ))}\n\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onChangeQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: TodosType.All }}\n          >\n            <button\n              aria-label=\"reset\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onChangeQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todo: Todo;\n  onClose: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User>();\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n\n  useEffect(() => {\n    const loadUsers = async () => {\n      try {\n        const userFromServer = await getUser(userId);\n\n        setUser(userFromServer);\n      } catch {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadUsers();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo ${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            {!isError && user ? (\n              <p className=\"block\" data-cy=\"modal-user\">\n                <strong className={classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n                >\n                  {completed ? 'Done' : 'Planned'}\n                </strong>\n\n                <span> by </span>\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            ) : (\n              <p style={{ color: 'red' }}>\n                Error... Sorry, try again later.\n              </p>\n            )}\n\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport { useMemo, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { TodosType } from './types/TodosType';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [query, setQuery] = useState('');\n  const [typeOfLoad, setTypeOfLoad] = useState<TodosType | string>(TodosType.All);\n\n  useEffect(() => {\n    const getTodosFromServer = async () => {\n      setIsLoading(true);\n\n      try {\n        const todosFromServer = await getTodos();\n\n        setTodos(todosFromServer);\n      } catch {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getTodosFromServer();\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const lowerCased = todo.title.toLowerCase().includes(query.toLowerCase());\n\n      switch (typeOfLoad) {\n        case TodosType.Active:\n          return !todo.completed && lowerCased;\n\n        case TodosType.Completed:\n          return todo.completed && lowerCased;\n\n        default:\n          break;\n      }\n\n      return lowerCased;\n    });\n  }, [typeOfLoad, query, todos]);\n\n  const selectedTodo = useMemo(() => (\n    todos.find(todo => todo.id === selectedTodoId)\n  ), [selectedTodoId]);\n\n  const handleSelectTodo = (id: number) => {\n    setSelectedTodoId(id);\n  };\n\n  const handleCloseModal = () => {\n    setSelectedTodoId(0);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onChangeQuery={setQuery}\n                onChangeTypeOfLoad={setTypeOfLoad}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && !isError ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodoId={selectedTodoId}\n                  handleSelectTodo={handleSelectTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClose={handleCloseModal}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}